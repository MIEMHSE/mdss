;; gorilla-repl.fileformat = 1

;; **
;;; # MinDistanceMethod
;;; 
;;; Метод минимального расстояния
;; **

;; @@
(ns mindistance-method-ws
  (:require [clojure.pprint :as pp]
            [gorilla-plot.core :as plot]
            [gorilla-repl.table :as t]
            [loom.graph :as g]
            [loom-gorilla.render :as l]
            [mdss.methods.mindistance :as md])
  (:use [clojure.core.matrix]))

(def method (md/->MinDistanceMethod))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;mindistance-method-ws/method</span>","value":"#'mindistance-method-ws/method"}
;; <=

;; **
;;; ## Ранжировки
;; **

;; @@
(def experts
  [:a :b :c])

(def expert-choices
  [[1 2 3 4]
   [1 3 2 4]
   [2 [1 3] 4]])

(t/table-view 
  (map md/get-permutations-repr expert-choices))

;; @@
;; =>
;;; {"type":"list-like","open":"<center><table>","close":"</table></center>","separator":"\n","items":[{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"[1 2 3 4]"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"[1 3 2 4]"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"},{"type":"html","content":"<span class='clj-string'>&quot;1~3&quot;</span>","value":"\"1~3\""},{"type":"html","content":"<span class='clj-string'>&quot;1~3&quot;</span>","value":"\"1~3\""},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"[2 \"1~3\" \"1~3\" 4]"}],"value":"#gorilla_repl.table.TableView{:contents ([1 2 3 4] [1 3 2 4] [2 \"1~3\" \"1~3\" 4]), :opts nil}"}
;; <=

;; @@
(def initial-map
  (merge
    (.init method)
	{:choices expert-ranges}))

initial-map
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>#object[clojure.lang.Var$Unbound 0x3bdd46d3 &quot;Unbound: #&#x27;mindistance-method-ws/initial-map&quot;]</span>","value":"#object[clojure.lang.Var$Unbound 0x3bdd46d3 \"Unbound: #'mindistance-method-ws/initial-map\"]"}
;; <=

;; **
;;; ## Решение
;;; 
;;; Строим перестановки
;; **

;; @@
(def solved-map (.solve method initial-map))

(t/table-view (:pm solved-map)
              :columns experts)
;; @@
;; =>
;;; {"type":"list-like","open":"<center><table>","close":"</table></center>","separator":"\n","items":[{"type":"list-like","open":"<tr><th>","close":"</th></tr>","separator":"</th><th>","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-keyword'>:b</span>","value":":b"},{"type":"html","content":"<span class='clj-keyword'>:c</span>","value":":c"}],"value":"[:a :b :c]"}],"value":"#gorilla_repl.table.TableView{:contents nil, :opts (:columns [:a :b :c])}"}
;; <=

;; **
;;; Координаты начальных вершин графа
;; **

;; @@
(t/table-view [(:ri solved-map) (range (count experts))]
              :columns experts)
;; @@
;; =>
;;; {"type":"list-like","open":"<center><table>","close":"</table></center>","separator":"\n","items":[{"type":"list-like","open":"<tr><th>","close":"</th></tr>","separator":"</th><th>","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-keyword'>:b</span>","value":":b"},{"type":"html","content":"<span class='clj-keyword'>:c</span>","value":":c"}],"value":"[:a :b :c]"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[],"value":"nil"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>0</span>","value":"0"},{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"}],"value":"(0 1 2)"}],"value":"#gorilla_repl.table.TableView{:contents [nil (0 1 2)], :opts (:columns [:a :b :c])}"}
;; <=

;; @@
(.solved? method solved-map)
;; @@
